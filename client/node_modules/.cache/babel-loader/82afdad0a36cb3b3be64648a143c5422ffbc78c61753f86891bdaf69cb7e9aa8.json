{"ast":null,"code":"import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\nexport default class ScrollService {\n  constructor() {\n    /* Scroll to hire me/ contact me screen */\n    this.scrollToHireMe = () => {\n      let contactMeScreen = document.getElementById(\"ContactMe\");\n      if (!contactMeScreen) return;\n      contactMeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n    this.scrollToHome = () => {\n      let homeScreen = document.getElementById(\"Home\");\n      if (!homeScreen) return;\n      homeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n    /* CHECK IF ELEMENT IS IN VIEW .this simply means if the document appears fully on the screen or not */\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      /*this method returns a DOMRect object providing information about the size of an element and its position relative to the viewport*/\n      /*the view port refers to the part of the document you're viewing which is currently visible in its window*/\n      let elementTop = rec.top;\n      let elemBottom = rec.bottom;\n\n      /* when the element is Partially Visible */\n      let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\n      /* Completely Visible */\n      let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n        case \"complete\":\n          return completelyVisible;\n        default:\n          return false;\n      }\n    };\n    /* CHECK THE SCREEN THATS CURRENTLY UNDER VIEWPORT */\n    /* which means the screen that is displayed fully */\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || Object.keys(event).length < 1) return;\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDOM = document.getElementById(screen.screen_name);\n        if (!screenFromDOM) continue;\n        let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            /*broadcast fade in effect*/\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen[\"alreadyRendered\"] = true;\n            break;\n          }\n          if (fullyVisible) {\n            /* Broadcast screen name */\n            ScrollService.currentScreenBroadCaster.next({\n              screenInView: screen.screen_name\n            });\n          }\n        }\n      }\n    };\n    /* Add scroll event to window */\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewport);\n  }\n}\n/* SINGLETON CLASS INSTANCE */\nScrollService.scrollHandler = new ScrollService();\n/* Lets instantiate the subject BROADCASTERS */\nScrollService.currentScreenBroadCaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"names":["TOTAL_SCREENS","Subject","ScrollService","constructor","scrollToHireMe","contactMeScreen","document","getElementById","scrollIntoView","behavior","scrollToHome","homeScreen","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elemBottom","bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","Object","keys","length","screen","screenFromDOM","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadCaster","screenInView","addEventListener","scrollHandler"],"sources":["/Users/meredith/Documents/Git_Folder/react-personal-portfolio/client/src/utilities/ScrollService.js"],"sourcesContent":["import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\n\nexport default class ScrollService {\n    /* SINGLETON CLASS INSTANCE */\n    static scrollHandler = new ScrollService();\n    /* Lets instantiate the subject BROADCASTERS */\n    static currentScreenBroadCaster = new Subject();\n    static currentScreenFadeIn = new Subject();\n\n    constructor() {\n        /* Add scroll event to window */\n        window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewport);\n    }\n    /* Scroll to hire me/ contact me screen */\n    scrollToHireMe = () => {\n        let contactMeScreen = document.getElementById(\"ContactMe\");\n        if (!contactMeScreen) return;\n        contactMeScreen.scrollIntoView({ behavior: \"smooth\" });\n    };\n\n    scrollToHome = () => {\n        let homeScreen = document.getElementById(\"Home\");\n        if (!homeScreen) return;\n        homeScreen.scrollIntoView({ behavior: \"smooth\" });\n    };\n\n    /* CHECK IF ELEMENT IS IN VIEW .this simply means if the document appears fully on the screen or not */\n    isElementInView = (elem, type) => {\n        let rec = elem.getBoundingClientRect();\n        /*this method returns a DOMRect object providing information about the size of an element and its position relative to the viewport*/\n        /*the view port refers to the part of the document you're viewing which is currently visible in its window*/\n        let elementTop = rec.top;\n        let elemBottom = rec.bottom;\n\n        /* when the element is Partially Visible */\n        let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\n        /* Completely Visible */\n        let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\n\n        switch (type) {\n            case \"partial\":\n                return partiallyVisible;\n            case \"complete\":\n                return completelyVisible;\n            default:\n                return false;\n        }\n    };\n\n    /* CHECK THE SCREEN THATS CURRENTLY UNDER VIEWPORT */\n    /* which means the screen that is displayed fully */\n    checkCurrentScreenUnderViewport = (event) => {\n        if (!event || Object.keys(event).length < 1) return;\n\n        for (let screen of TOTAL_SCREENS) {\n            let screenFromDOM = document.getElementById(screen.screen_name);\n            if (!screenFromDOM) continue;\n\n            let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n            let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n\n            if (fullyVisible || partiallyVisible) {\n                if (partiallyVisible && !screen.alreadyRendered) {\n                    /*broadcast fade in effect*/\n                    ScrollService.currentScreenFadeIn.next({\n                        fadeInScreen: screen.screen_name,\n                    });\n                    screen[\"alreadyRendered\"] = true;\n                    break;\n                }\n                if (fullyVisible) {\n                    /* Broadcast screen name */\n                    ScrollService.currentScreenBroadCaster.next({\n                        screenInView: screen.screen_name,\n                    });\n                }\n            }\n        }\n    };\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,eAAe;AAC7C,SAASC,OAAO,QAAQ,MAAM;AAE9B,eAAe,MAAMC,aAAa,CAAC;EAO/BC,WAAWA,CAAA,EAAG;IAId;IAAA,KACAC,cAAc,GAAG,MAAM;MACnB,IAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC;MAC1D,IAAI,CAACF,eAAe,EAAE;MACtBA,eAAe,CAACG,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAS,CAAC,CAAC;IAC1D,CAAC;IAAA,KAEDC,YAAY,GAAG,MAAM;MACjB,IAAIC,UAAU,GAAGL,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;MAChD,IAAI,CAACI,UAAU,EAAE;MACjBA,UAAU,CAACH,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAS,CAAC,CAAC;IACrD,CAAC;IAED;IAAA,KACAG,eAAe,GAAG,CAACC,IAAI,EAAEC,IAAI,KAAK;MAC9B,IAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAqB,CAAC,CAAC;MACtC;MACA;MACA,IAAIC,UAAU,GAAGF,GAAG,CAACG,GAAG;MACxB,IAAIC,UAAU,GAAGJ,GAAG,CAACK,MAAM;;MAE3B;MACA,IAAIC,gBAAgB,GAAGJ,UAAU,GAAGK,MAAM,CAACC,WAAW,IAAIJ,UAAU,IAAI,CAAC;MACzE;MACA,IAAIK,iBAAiB,GAAGP,UAAU,IAAI,CAAC,IAAIE,UAAU,IAAIG,MAAM,CAACC,WAAW;MAE3E,QAAQT,IAAI;QACR,KAAK,SAAS;UACV,OAAOO,gBAAgB;QAC3B,KAAK,UAAU;UACX,OAAOG,iBAAiB;QAC5B;UACI,OAAO,KAAK;MACpB;IACJ,CAAC;IAED;IACA;IAAA,KACAC,+BAA+B,GAAIC,KAAK,IAAK;MACzC,IAAI,CAACA,KAAK,IAAIC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,MAAM,GAAG,CAAC,EAAE;MAE7C,KAAK,IAAIC,MAAM,IAAI9B,aAAa,EAAE;QAC9B,IAAI+B,aAAa,GAAGzB,QAAQ,CAACC,cAAc,CAACuB,MAAM,CAACE,WAAW,CAAC;QAC/D,IAAI,CAACD,aAAa,EAAE;QAEpB,IAAIE,YAAY,GAAG,IAAI,CAACrB,eAAe,CAACmB,aAAa,EAAE,UAAU,CAAC;QAClE,IAAIV,gBAAgB,GAAG,IAAI,CAACT,eAAe,CAACmB,aAAa,EAAE,SAAS,CAAC;QAErE,IAAIE,YAAY,IAAIZ,gBAAgB,EAAE;UAClC,IAAIA,gBAAgB,IAAI,CAACS,MAAM,CAACI,eAAe,EAAE;YAC7C;YACAhC,aAAa,CAACiC,mBAAmB,CAACC,IAAI,CAAC;cACnCC,YAAY,EAAEP,MAAM,CAACE;YACzB,CAAC,CAAC;YACFF,MAAM,CAAC,iBAAiB,CAAC,GAAG,IAAI;YAChC;UACJ;UACA,IAAIG,YAAY,EAAE;YACd;YACA/B,aAAa,CAACoC,wBAAwB,CAACF,IAAI,CAAC;cACxCG,YAAY,EAAET,MAAM,CAACE;YACzB,CAAC,CAAC;UACN;QACJ;MACJ;IACJ,CAAC;IApEG;IACAV,MAAM,CAACkB,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACf,+BAA+B,CAAC;EAC3E;AAmEJ;AA5EI;AADiBvB,aAAa,CAEvBuC,aAAa,GAAG,IAAIvC,aAAa,CAAC,CAAC;AAC1C;AAHiBA,aAAa,CAIvBoC,wBAAwB,GAAG,IAAIrC,OAAO,CAAC,CAAC;AAJ9BC,aAAa,CAKvBiC,mBAAmB,GAAG,IAAIlC,OAAO,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}